#summary ミドルウェア (9)

= モデルデータの使用 =

Unityは色々な3Dツールのデータ形式に対応しているが、迷ったときはとりあえずfbx形式でやりとりしておくのが最も無難と言われる。

  * [http://vga-unity.googlecode.com/files/VantanKun.zip サンプルデータ(VantanKun.zip)]をダウンロードして解凍しておく。

サンプルデータの中にはモデルデータ(!VantanKun.fbx)とテクスチャデータ(!VantanKun.png)が入っている。

== モデルデータの取り込み ==

データを取り込むには、Projectビューにドラッグ＆ドロップするだけ。

  * !VantanKun.fbxと!VantanKun.pngをProjectビューにドラッグ＆ドロップする。

モデルデータを取り込むと、モデルデータが追加されるのと同時に、モデルデータ内に含まれるマテリアルが自動的に作成される。このデータの場合であれば!VantanKunという名前のマテリアル。

マテリアルと同名のテクスチャが存在する場合は、自動的にそのテクスチャがマテリアルに貼られる。

  * マテリアル!VantanKunの設定を確認する。もしテクスチャが貼られていなかったら、!VantanKun.pngをテクスチャに設定する。

Projectビューの中で、モデルデータ!VantanKunは階層を持っているように見える。

  * モデルデータ!VantanKunの階層を開いて中身を見てみる。

モデルデータの中には、階層構造と、メッシュデータと、アニメーションデータが含まれる。!VantanKunの場合は、階層構造のトップである"Pelvis"と、メッシュデータである"Cahracter"と、複数のアニメーションデータが見える。

== シーンへの追加 ==

モデルをシーンに追加するには、モデルデータをSceneビューにドラッグ＆ドロップするだけ。

  * !VantanKunをSceneビューにドラッグ＆ドロップする。

シーンに追加されたモデルは、とりあえずデフォルトのアニメーションが自動再生されるようになっている。

  * 実行して、アニメーションが再生されるのを確認する。

デフォルトアニメーションを変えるには、AnimationコンポーネントにあるAnimationを変更する。

  * シーンに配置した!VantanKunを選択する。
  * Animationコンポーネント内のAnimation項目の横にある丸をクリックする。
  * アニメーション選択ウィンドウが表示されるので、その中から"Walk"を選択する。
  * 実行して、歩くアニメーションが1回だけ再生されるのを確認する。

== FBXインポート設定の調整 ==

アニメーションデータのデフォルトのインポート設定では、アニメーションは1回しか再生されないようになっている。大抵の場合、これはループされるようにしておいた方が使いやすい。

  * Projectビューのモデルデータ!VantanKunを選択する。
  * FBXImporterの中にある項目"Animation Wrap Mode"を"Loop"に変更する。
  * FBXImporterのいちばん下にある"Apply"ボタンを押して、変更を適用する。
  * 実行して、ループ再生されるようになったことを確認する。

  * !VantanKunに含まれているアニメーションを一通り確認する。

== アニメーションの制御 ==

=== 単純に再生してみる ===

アニメーションの再生をスクリプトから制御するにはanimationプロパティを使う。

  * スクリプト!AnimtionTestを新規作成する。
  * スクリプトをシーンに配置した!VantanKunにドラッグ＆ドロップする。
  * 警告ダイアログ("Losing Prefab")が表示されるが、"Continue"で続ける。
  * スクリプトの中身を次のようにする。

{{{
function Start() {
    animation.Play("Walk");
    yield WaitForSeconds(3.0);
    animation.Play("Greet");
}
}}}

  * 動作確認する。

歩きアニメーションが3秒間再生されて、そのあと挨拶アニメーションに変化する。

=== インタラクティブに制御してみる ===

とりあえず、キー入力されている間、歩きアニメーションが再生されるようにしてみる。

  * スクリプトの中身を次のようにする。

{{{
function Update() {
    if (Mathf.Abs(Input.GetAxis("Horizontal")) > 0.5) {
        animation.Play("Walk");
    } else {
        animation.Play("Idle");
    }
}
}}}

Play関数は、アニメーションが既に再生中の場合は何もしないので、こんな感じで毎フレーム呼んでも問題ない。

=== アニメーションの切り替えを滑らかにする ===

Playの代わりに!CrossFadeを使うと、アニメーションの切り替えが滑らかになる。

  * スクリプトの中身を次のようにする。

{{{
function Update() {
    if (Mathf.Abs(Input.GetAxis("Horizontal")) > 0.5) {
        animation.CrossFade("Walk");
    } else {
        animation.CrossFade("Idle");
    }
}
}}}

