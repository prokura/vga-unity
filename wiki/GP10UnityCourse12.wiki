#summary ミドルウェア (12)

= オブジェクト間連携（メッセージング） =

複数のゲームオブジェクトが相互に連携して動作するための仕組みを学ぶ。

= 方法その１・コンポーネントへの直接アクセス =

コンポーネント(Component)とは「部品」のこと。Unityにおける{{{Transform}}}とか{{{Rigidbody}}}とか{{{BoxCollider}}}とかは、全部コンポーネント。

ユーザーが書いたスクリプトもコンポーネントとして扱うことができる。例えばBoxスクリプトは{{{Box}}}コンポーネントとなる。

Unityに用意されている標準的なコンポーネントについては、{{{transform}}}や{{{rigidbody}}}や{{{collider}}}などのように、プロパティ経由で簡単にアクセスできる。しかし、レアなコンポーネントや、ユーザーが自作したコンポーネントへは{{{GetComponent}}}を使わないとアクセスできない。

== 箱の点滅を止めるには ==

まず、Flicker/Blinkerスクリプトに、点滅を止めるための関数を用意する。

次に、Wallスクリプトの中でFlicker/Blinkerコンポーネントへのアクセスを取得し、そこから点滅を止めるための関数を呼び出す。

== Flickerの拡張 ==

{{{stopFlag}}}を用意し、{{{StopUpdate}}}関数を呼ぶと止まるようにする。

{{{
private var stopFlag : boolean;

function StopUpdate() {
	stopFlag = true;
}

function Update() {
	if (!stopFlag) {
		var red : float = Mathf.Sin(Time.time * 100.0);
		renderer.material.color = Color(red, 0, 0, 0);
	}
}
}}}

== {{{StopUpdate}}}を呼び出す ==

Wallスクリプトの{{{OnTriggerEnter}}}内で、{{{GetComponent}}}関数を使ってFlickerコンポーネントへのアクセスを取得し、成功したら{{{StopUpdate}}}関数を呼び出す。

指定されたコンポーネントが存在しない場合、{{{GetComponent}}}関数はnullを返す。これにより、相手が特定のコンポーネントを持つか否かを判定できる。

{{{
function OnTriggerEnter(other : Collider) {
	var flickerComponent : Flicker = other.GetComponent(Flicker);
	if (flickerComponent != null) {
		flickerComponent.StopUpdate();
	}
}
}}}

== Blinkerも対応する ==

BlinkerスクリプトをFlickerスクリプトと同じように拡張する。

Wallスクリプト側も対応する。

{{{
function OnTriggerEnter(other : Collider) {
	var flickerComponent : Flicker = other.GetComponent(Flicker);
	if (flickerComponent != null) {
		flickerComponent.StopUpdate();
	}

	var blinkerComponent : Blinker = other.GetComponent(Blinker);
	if (blinkerComponent != null) {
		blinkerComponent.StopUpdate();
	}
}
}}}

{{{
function OnTriggerEnter(other : Collider) {
	other.SendMessage("StopUpdate");
}
}}}

{{{
function OnTriggerEnter(other : Collider) {
	other.SendMessage("StopUpdate", SendMessageOptions.DontRequireReceiver);
}
}}}

{{{
function OnTriggerEnter(other : Collider) {
	other.BroadcastMessage("StopUpdate", SendMessageOptions.DontRequireReceiver);
}
}}}

{{{
private var stopFlag : boolean;

function Update() {
	if (!stopFlag) {
		transform.localRotation = Quaternion.AngleAxis(800.0 * Time.time, Vector3.right);
	}
}

function StopUpdate() {
	stopFlag = true;
}
}}}

= メッセージングの引数 =

= 自分自身との連携 =
